mtext("Measure A", side = 1, line = 2.5, cex = 1.5)
mtext("Measure B", side = 2, line = 3.7, cex = 1.5)
set.seed(1)
op <- par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5 , font.lab = 2, cex.axis = 1.3, bty = "n", las = 1)
A <- rnorm(100)
B <- A - rnorm(100, 0, 1)
plot(A, B, pch = 21, bg = "grey", cex = 2, axes = FALSE,
ylab = "", xlab = "")
axis(1)
axis(2)
par(las = 0)
mtext("Measure A", side = 1, line = 2.5, cex = 1.5)
mtext("Measure B", side = 2, line = 3.7, cex = 1.5)
set.seed(1)
op <- par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5 , font.lab = 2, cex.axis = 1.3, bty = "n", las = 1)
A <- rnorm(100)
B <- A - rnorm(100, 0, 1)
plot(A, B, pch = 21, bg = "grey", cex = 2, axes = FALSE,
ylab = "", xlab = "")
axis(1)
axis(2)
par(las = 0)
mtext("Measure A", side = 1, line = 2.5, cex = 1.5)
mtext("Measure B", side = 2, line = 3.7, cex = 1.5)
set.seed(42)
op <- par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5 , font.lab = 2, cex.axis = 1.3, bty = "n", las = 1)
A <- rnorm(100)
B <- A + rnorm(100, 0, 1)
plot(A, B, pch = 21, bg = "grey", cex = 2, axes = FALSE,
ylab = "", xlab = "")
axis(1)
axis(2)
par(las = 0)
mtext("Measure A", side = 1, line = 2.5, cex = 1.5)
mtext("Measure B", side = 2, line = 3.7, cex = 1.5)
serve_site()
build_site9()
build_site()
serve_site()
build_site()
library(blogdown)
build_site()
build_site()
serve_site()
build_site()
library(blogdown)
build_site()
build_site()
serve_site()
build_site()
install.packages("plotly")
library(plotly)
fig <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
fig
knitr::opts_chunk$set(echo = TRUE)
plot_ly(x = c(1, 2, 3),
y = c(5, 6, 7),
type = 'bar' ,
mode = 'markers')
plot_ly(y = rnorm(50),
type = 'box') %>%
add_trace(y = rnorm(50, 1))
library(tidyverse)
images <- numeric(21)
sample_stim <- seq(2, 20, by = 2)
probe_stim <- seq(1, 21, by = 1)
data <- expand_grid(sample_stim, probe_stim)
data
data <- data %>%
expand(sample_stim, probe_stim) %>%
filter(sample_stim != probe_stim) %>%
mutate(distance = probe_stim - sample_stim) %>%
mutate(correct_response = if_else(distance > 0, "z", "m")) %>%
mutate(sample_stim = paste(sample_stim, ".png", sep = ""),
probe_stim = paste(probe_stim, ".png", sep = "")) %>%
mutate(distance = abs(distance))
data
data
# ensure all distances equally accounted for
for(i in 1:nrow(data_count)){
# how many trials do we need
sample_size <- 20 - data_count$n[i]
if(sample_size > 0){
# get the random sample
sample_data <- data %>%
filter(distance == data_count$distance[i]) %>%
sample_n(sample_size, replace = TRUE)
# add to the data frame
data <- rbind(data, sample_data)
}
}
data_count <- data %>%
count(distance)
data_count
library(tidyverse)
images <- numeric(21)
sample_stim <- seq(2, 20, by = 2)
probe_stim <- seq(1, 21, by = 1)
data <- expand_grid(sample_stim, probe_stim)
data <- data %>%
expand(sample_stim, probe_stim) %>%
filter(sample_stim != probe_stim) %>%
mutate(distance = probe_stim - sample_stim) %>%
mutate(correct_response = if_else(distance > 0, "z", "m")) %>%
mutate(sample_stim = paste(sample_stim, ".png", sep = ""),
probe_stim = paste(probe_stim, ".png", sep = "")) %>%
mutate(distance = abs(distance))
data
data_count <- data %>%
count(distance)
data_count
# ensure all distances equally accounted for
for(i in 1:nrow(data_count)){
# how many trials do we need
sample_size <- 20 - data_count$n[i]
if(sample_size > 0){
# get the random sample
sample_data <- data %>%
filter(distance == data_count$distance[i]) %>%
sample_n(sample_size, replace = TRUE)
# add to the data frame
data <- rbind(data, sample_data)
}
}
library(tidyverse)
images <- numeric(21)
sample_stim <- seq(2, 20, by = 2)
probe_stim <- seq(1, 21, by = 1)
data <- expand_grid(sample_stim, probe_stim)
data <- data %>%
expand(sample_stim, probe_stim) %>%
filter(sample_stim != probe_stim) %>%
mutate(distance = probe_stim - sample_stim) %>%
mutate(correct_response = if_else(distance > 0, "z", "m")) %>%
mutate(sample_stim = paste(sample_stim, ".png", sep = ""),
probe_stim = paste(probe_stim, ".png", sep = "")) %>%
mutate(distance = abs(distance))
data
data_count <- data %>%
count(distance)
data_count
# ensure all distances equally accounted for
for(i in 1:nrow(data_count)){
# how many trials do we need
sample_size <- 20 - data_count$n[i]
if(sample_size > 0){
# get the random sample
sample_data <- data %>%
filter(distance == data_count$distance[i]) %>%
sample_n(sample_size, replace = TRUE)
# add to the data frame
data <- rbind(data, sample_data)
}
}
data_count <- data %>%
count(distance)
data_count
head(data)
3870/6
380/6
380/7
380/5
setwd("~/Dropbox/Work/Teaching/BSc/BSc Supervision/Students/Patel/Experiment")
setwd("~/Dropbox/Work/Teaching/BSc/BSc Supervision/Students/Patel/Experiment")
setwd("~/Dropbox/Work/Teaching/BSc/BSc Supervision/Students/Patel/Experiment")
library(tidyverse)
images <- numeric(21)
sample_stim <- seq(2, 20, by = 2)
probe_stim <- seq(1, 21, by = 1)
data <- expand_grid(sample_stim, probe_stim)
data <- data %>%
expand(sample_stim, probe_stim) %>%
filter(sample_stim != probe_stim) %>%
mutate(distance = probe_stim - sample_stim) %>%
mutate(correct_response = if_else(distance > 0, "z", "m")) %>%
mutate(sample_stim = paste(sample_stim, ".png", sep = ""),
probe_stim = paste(probe_stim, ".png", sep = "")) %>%
mutate(distance = abs(distance))
data
data_count <- data %>%
count(distance)
data_count
# ensure all distances equally accounted for
for(i in 1:nrow(data_count)){
# how many trials do we need
sample_size <- 20 - data_count$n[i]
if(sample_size > 0){
# get the random sample
sample_data <- data %>%
filter(distance == data_count$distance[i]) %>%
sample_n(sample_size, replace = TRUE)
# add to the data frame
data <- rbind(data, sample_data)
}
}
data_count <- data %>%
count(distance)
data_count
write.csv(data, "main_experiment.csv")
head(data)
practice_trials <- data %>%
group_by(distance) %>%
sample_n(1)
practice_trials
data %>%
group_by(distance) %>%
sample_n(1) %>%
count(correct_response)
# practice trials
set.seed(42)
practice_trials <- data %>%
group_by(distance) %>%
sample_n(1)
practice_trials
# practice trials
set.seed(41)
practice_trials <- data %>%
group_by(distance) %>%
sample_n(1)
practice_trials
# practice trials
set.seed(41)
practice_trials <- data %>%
group_by(correct_response) %>%
sample_n(6)
practice_trials
# practice trials
set.seed(42)
practice_trials <- data %>%
group_by(correct_response) %>%
sample_n(6)
practice_trials
# practice trials
set.seed(402)
practice_trials <- data %>%
group_by(correct_response) %>%
sample_n(6)
practice_trials
# practice trials
set.seed(420)
practice_trials <- data %>%
group_by(correct_response) %>%
sample_n(6)
practice_trials
write.csv(practice_trials, "practice_trials.csv")
# practice trials
set.seed(420)
practice_trials <- data %>%
group_by(distance) %>%
sample_n(1)
practice_trials
# practice trials
set.seed(4201)
practice_trials <- data %>%
group_by(distance) %>%
sample_n(1)
practice_trials
set.seed(4201)
practice_trials <- data %>%
group_by(distance) %>%
sample_n(1)
write.csv(practice_trials, "practice_trials.csv")
setwd("~/Desktop")
x <- rnorm(100)
write.csv(x, "x.csv")
x <- rnorm(300)
write.csv(x, "x.csv")
x <- rnorm(300, 100 20)
write.csv(x, "x.csv")
x <- rnorm(100, 100 20)
write.csv(x, "x.csv")
x <- rnorm(100, 100, 20)
write.csv(x, "x.csv")
x <- rnorm(400, 100, 20)
write.csv(x, "x.csv")
x <- rnorm(300, 100, 20)
write.csv(x, "x.csv")
x <- rnorm(100, 100, 20)
write.csv(x, "x.csv")
x <- rnorm(100, 100, 20)
write.csv(x, "x.csv")
x <- rnorm(100, 100, 20)
write.csv(x, "x.csv")
x <- rnorm(300)
write.csv(x, "x.csv")
x <- rnorm(150)
write.csv(x, "x.csv")
x <- rnorm(150)
write.csv(x, "x.csv")
x <- rnorm(150)
write.csv(x, "x.csv")
x <- rnorm(150)
write.csv(x, "x.csv")
x <- rnorm(1000)
write.csv(x, "x.csv")
x <- read.csv("height_weight.csv")
head(x)
library(dplyr)
x <- x %>%
select(-Gender, -Index)
write.csv(x, "height_weight.csv", row.names = FALSE)
seq(from = 1, to = 50, length.out = 21)
library(tidyverse)
set.seed(11111)
# how many trials per distance?
desired_sample_size <- 12
# set the stimuli
sample_stim <- seq(2, 20, by = 2)
probe_stim <- seq(1, 21, by = 1)
data <- expand_grid(sample_stim, probe_stim)
# sort the stimuli into spreadsheet format
data <- data %>%
expand(sample_stim, probe_stim) %>%
filter(sample_stim != probe_stim) %>%
mutate(distance = probe_stim - sample_stim) %>%
mutate(correct_response = if_else(distance > 0, "z", "m")) %>%
mutate(sample_stim = paste(sample_stim, ".png", sep = ""),
probe_stim = paste(probe_stim, ".png", sep = "")) %>%
mutate(distance = abs(distance))
data
# check how many trials per distance
data_count <- data %>%
count(distance)
data_count
# final data frame
all_data <- NULL
# ensure all distances equally accounted for
for(i in 1:nrow(data_count)){
# get the random sample
sample_data <- data %>%
filter(distance == data_count$distance[i]) %>%
sample_n(desired_sample_size, replace = TRUE)
# add to the data frame
all_data <- rbind(all_data, sample_data)
}
# randomise the order
all_data <- all_data %>%
sample_n(nrow(all_data), replace = FALSE)
# check response options are equal
all_data %>% count(correct_response)
library(tidyverse)
set.seed(11111)
# how many trials per distance?
desired_sample_size <- 12
# set the stimuli
sample_stim <- seq(2, 20, by = 2)
probe_stim <- seq(1, 21, by = 1)
data <- expand_grid(sample_stim, probe_stim)
# sort the stimuli into spreadsheet format
data <- data %>%
expand(sample_stim, probe_stim) %>%
filter(sample_stim != probe_stim) %>%
mutate(distance = probe_stim - sample_stim) %>%
mutate(correct_response = if_else(distance > 0, "z", "m")) %>%
mutate(sample_stim = paste(sample_stim, ".bmp", sep = ""),
probe_stim = paste(probe_stim, "bmp", sep = "")) %>%
mutate(distance = abs(distance))
data
# check how many trials per distance
data_count <- data %>%
count(distance)
data_count
# final data frame
all_data <- NULL
# ensure all distances equally accounted for
for(i in 1:nrow(data_count)){
# get the random sample
sample_data <- data %>%
filter(distance == data_count$distance[i]) %>%
sample_n(desired_sample_size, replace = TRUE)
# add to the data frame
all_data <- rbind(all_data, sample_data)
}
# randomise the order
all_data <- all_data %>%
sample_n(nrow(all_data), replace = FALSE)
# check response options are equal
all_data %>% count(correct_response)
head(all_data)
library(tidyverse)
set.seed(11111)
# how many trials per distance?
desired_sample_size <- 12
# set the stimuli
sample_stim <- seq(2, 20, by = 2)
probe_stim <- seq(1, 21, by = 1)
data <- expand_grid(sample_stim, probe_stim)
# sort the stimuli into spreadsheet format
data <- data %>%
expand(sample_stim, probe_stim) %>%
filter(sample_stim != probe_stim) %>%
mutate(distance = probe_stim - sample_stim) %>%
mutate(correct_response = if_else(distance > 0, "z", "m")) %>%
mutate(sample_stim = paste(sample_stim, ".bmp", sep = ""),
probe_stim = paste(probe_stim, ".bmp", sep = "")) %>%
mutate(distance = abs(distance))
data
# check how many trials per distance
data_count <- data %>%
count(distance)
data_count
# final data frame
all_data <- NULL
# ensure all distances equally accounted for
for(i in 1:nrow(data_count)){
# get the random sample
sample_data <- data %>%
filter(distance == data_count$distance[i]) %>%
sample_n(desired_sample_size, replace = TRUE)
# add to the data frame
all_data <- rbind(all_data, sample_data)
}
# randomise the order
all_data <- all_data %>%
sample_n(nrow(all_data), replace = FALSE)
# check response options are equal
all_data %>% count(correct_response)
setwd("~/Desktop")
write.csv(all_data, "x.csv", row.names = FALSE)
head(data)
head(all_data)
library(tidyverse)
set.seed(11111)
# how many trials per distance?
desired_sample_size <- 12
# set the stimuli
sample_stim <- seq(2, 20, by = 2)
probe_stim <- seq(1, 21, by = 1)
data <- expand_grid(sample_stim, probe_stim)
data
# sort the stimuli into spreadsheet format
data <- data %>%
expand(sample_stim, probe_stim) %>%
filter(sample_stim != probe_stim) %>%
mutate(distance = probe_stim - sample_stim) %>%
mutate(correct_response = if_else(distance > 0, "z", "m")) %>%
mutate(sample_stim = paste(sample_stim, ".bmp", sep = ""),
probe_stim = paste(probe_stim, ".bmp", sep = "")) %>%
mutate(distance = abs(distance))
data
head(data)
tail(data\)
tail(data)
data_count <- data %>%
count(distance)
data_count
# ensure all distances equally accounted for
for(i in 1:nrow(data_count)){
# get the random sample
sample_data <- data %>%
filter(distance == data_count$distance[i]) %>%
sample_n(desired_sample_size, replace = TRUE)
# add to the data frame
all_data <- rbind(all_data, sample_data)
}
# randomise the order
all_data <- all_data %>%
sample_n(nrow(all_data), replace = FALSE)
head(all_data)
library(tidyverse)
set.seed(11111)
# how many trials per distance?
desired_sample_size <- 12
# set the stimuli
sample_stim <- seq(2, 20, by = 2)
probe_stim <- seq(1, 21, by = 1)
data <- expand_grid(sample_stim, probe_stim)
# sort the stimuli into spreadsheet format
data <- data %>%
expand(sample_stim, probe_stim) %>%
filter(sample_stim != probe_stim) %>%
mutate(distance = probe_stim - sample_stim) %>%
mutate(correct_response = if_else(distance > 0, "z", "m")) %>%
mutate(sample_stim = paste(sample_stim, ".bmp", sep = ""),
probe_stim = paste(probe_stim, ".bmp", sep = "")) %>%
mutate(distance = abs(distance))
data
# check how many trials per distance
data_count <- data %>%
count(distance)
data_count
# final data frame
all_data <- NULL
# ensure all distances equally accounted for
for(i in 1:nrow(data_count)){
# get the random sample
sample_data <- data %>%
filter(distance == data_count$distance[i]) %>%
sample_n(desired_sample_size, replace = TRUE)
# add to the data frame
all_data <- rbind(all_data, sample_data)
}
# randomise the order
all_data <- all_data %>%
sample_n(nrow(all_data), replace = FALSE)
# check response options are equal
all_data %>% count(correct_response)
head(all_data)
library(blogdown)
library(blogdown)
blogdown::build_site
blogdown::build_site()
blogdown::serve_site()
library(blogdown)
build_site()
serve_site()
serve_site()
serve_site()
build_site()
serve_site()
build_site()
serve_site()
